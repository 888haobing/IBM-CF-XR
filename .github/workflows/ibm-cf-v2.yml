#
# https://github.com/P3TERX/IBM-CF-V2
#
# Copyright (c) 2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: IBM Cloud Foundry - XRay

env:
  IBM_CF_API: https://cloud.ibm.com
  IBM_REGION: us-south
  IBM_CF_APP_MEM: 128M

on:
  workflow_dispatch:
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      IBM_CF_USERNAME: ${{ secrets.IBM_CF_USERNAME }}
      IBM_CF_PASSWORD: ${{ secrets.IBM_CF_PASSWORD }}
      IBM_CF_ORG_NAME: ${{ secrets.IBM_CF_ORG_NAME }}
      IBM_CF_SPACE_NAME: ${{ secrets.IBM_CF_SPACE_NAME }}
      IBM_CF_APP_NAME: ${{ secrets.IBM_CF_APP_NAME }}
      XR_VM_UUID: ${{ secrets.XR_VM_UUID }}
      XR_VL_UUID: ${{ secrets.XR_VL_UUID }}

    steps:

    - name: IBM-CF-XR Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Cloud Foundry CLI
      run: |
        curl -fsSL "https://clis.cloud.ibm.com/download/bluemix-cli/latest/linux64/archive" | tar -zx
        sudo mv ./IBM_Cloud_CLI/ibmcloud /usr/local/bin/
        ibmcloud cf install -v 7.2.0

    - name: Login to IBM Cloud Foundry
      run: |
        ibmcloud api "${IBM_CF_API}" \
        ibmcloud target \
              -o "${IBM_CF_ORG_NAME:-$IBM_CF_USERNAME}" \
              -s "${IBM_CF_SPACE_NAME:-dev}"
        ibmcloud login \
              -a "${IBM_CF_API}" \
              --no-account \
              -r "${IBM_REGION}" \
              -u "${IBM_CF_USERNAME}" \
              -p "${IBM_CF_PASSWORD}"

    - name: Download Cert
      run: |
        curl -fsSL "https://github.com/Dimitri2020007/IBM-CF-XR/raw/main/cert.zip"
        unzip cert.zip cert.crt cert.key

    - name: Download Caddy Indexpage
      run: |
        curl -fssL "https://raw.githubusercontent.com/Dimitri2020007/IBM-CF-XR/main/index.html"

    - name: Download Caddy Config
      run: |
        curl -fssL "https://raw.githubusercontent.com/Dimitri2020007/IBM-CF-XR/main/Caddyfile"

    - name: Download Caddy
      run: |
        curl -fssL "https://github.com/caddyserver/caddy/releases/download/v2.3.0/caddy_2.3.0_linux_amd64.tar.gz" | tar -zx
        caddy start --config /home/vcap/app/Caddyfile

    - name: Download Latest XRay
      run: |
        curl -fsSL "https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip" -o "latest-Xray.zip"
        unzip latest-Xray.zip xray geoip.dat geosite.dat
        rm latest-Xray.zip
        chmod -v 755 x*
        ./xray -version
        mv xray ${IBM_CF_APP_NAME}

    - name: Generate XRay Config File (VMess)
      if: ${{ env.XR_VM_UUID }}
      run: |
        base64 << P3TERX > config
        {
          "log": {
            "access": "none",
            "loglevel": "error"
          },
          "inbounds": [
            {
              "port": 8080,
              "protocol": "vmess",
              "settings": {
                "clients": [
                  {
                    "id": "${XR_VM_UUID}",
                    "alterId": 64
                  }
                ]
              },
              "streamSettings": {
                "network":"ws",
                "wsSettings": {
                  "path": "/${XR_VM_UUID}-vmess"
                }
              }
            }
          ],
          "outbounds": [
            {
              "protocol": "freedom"
            }
          ]
        }
        P3TERX

    - name: Generate XRay Config File (VLESS)
      if: ${{ env.XR_VL_UUID }}
      run: |
        base64 << P3TERX > config
        {
          "log": {
            "access": "none",
            "loglevel": "error"
          },
          "inbounds": [
            {
              "port": 8080,
              "protocol": "vless",
              "settings": {
                "decryption": "none",
                "clients": [
                  {
                    "id": "${XR_VL_UUID}",
                    "flow": "xtls-rprx-direct",
                    "level": 0,
                    "email": "love@xray.org"
                  }
                ]
              },
              "streamSettings": {
                "network":"ws",
                "allowInsecure": false,
                "wsSettings": {
                  "path": "/${XR_VL_UUID}-vless"
                }
              }
            }
          ],
          "outbounds": [
            {
              "protocol": "freedom"
            }
          ]
        }
        P3TERX

    - name: Generate Manifest File
      run: |
        cat << P3TERX > manifest.yml
        applications:
        - name: ${IBM_CF_APP_NAME}
          memory: ${IBM_CF_APP_MEM}
          random-route: true
          command: base64 -d config > config.json; ./${IBM_CF_APP_NAME} -config=config.json
          buildpacks:
          - binary_buildpack
        P3TERX

    - name: Deploy Cloud Foundry App
      run: |
        ibmcloud target --cf
        ibmcloud cf push
